import pygame, sys
from pygame.locals import *
import copy
pygame.init()


def fenetre():
    HAUTEUR =525
    LARGEUR = 800
    jeu = pygame.display.set_mode((LARGEUR,HAUTEUR))
    pygame.display.set_caption("Pentago GUI")
    WHITE = (255,255,255)
    RED = (155,0,0)
    BLACK = (0,0,0)
    RED1 = (120,0,0)
    liste = [[0]*6 for i in range (6)]
    liste1 = copy.deepcopy(liste)
    b=len(liste)

    joueurActif=[1]

    quadrant(jeu,RED,RED1,liste1,b)


    inProgress = True
    while inProgress:
        for event in pygame.event.get():
            if event.type == QUIT:
                inProgress = False
            MajQuadrant(jeu,WHITE,BLACK,liste,b,liste1)
            tour(event,joueurActif,jeu,WHITE,BLACK,liste,b,liste1)
            print(liste)

        pygame.display.update()
    pygame.quit()


def quadrant(jeu,RED,RED1,liste1,b):

    n=len(liste1)/2

    pygame.draw.rect(jeu, RED, (50,50,50*n,50*n))

    pygame.draw.rect(jeu, RED, (n*50+55,50,50*n,50*n))

    pygame.draw.rect(jeu, RED, (50,n*50+55,50*n,50*n))

    pygame.draw.rect(jeu, RED, (n*50+55,n*50+55,50*n,50*n))



    x=0
    y=0
    for i in range(b):
        for a in range (b):



            #pygame.draw.circle(jeu, RED1, (77+i*x,77+a*y), 10)
            if x > 45*b:
                x = 0
                y += 50
            pygame.draw.circle(jeu, RED1, (75+x,75+y), 10)
            liste1[i][a] = pygame.Rect(75+x,75+y,10,10)
            x += 50



def tour(event,joueurActif,jeu,WHITE,BLACK,liste,b,liste1):



    n = 6

    rfle1 = pygame.draw.rect(jeu,BLACK,(17*n,3*n,43,25),0)
    rfle2 = pygame.draw.rect(jeu,BLACK,(42*n,3*n,43,25),0)
    rfle3 = pygame.draw.rect(jeu,BLACK,(59*n,17*n,25,43),0)
    rfle4 = pygame.draw.rect(jeu,BLACK,(59*n,42*n,25,43),0)
    rfle5 = pygame.draw.rect(jeu,BLACK,(42*n,59*n,43,25),0)
    rfle6 = pygame.draw.rect(jeu,BLACK,(17*n,59*n,43,25),0)
    rfle7 = pygame.draw.rect(jeu,BLACK,(3*n,42*n,25,43),0)
    rfle8 = pygame.draw.rect(jeu,BLACK,(3*n,17*n,25,43),0)
    AffiFleches(jeu,BLACK)

    if joueurActif [0]==1:

        pygame.draw.rect(jeu,BLACK,(66*n,25,205,50),0)
        fontObj = pygame.font.Font('freesansbold.ttf',20)
        texteSurface = fontObj.render('Poser un pion blanc' ,True,WHITE,BLACK)
        texteRect = texteSurface.get_rect()
        pygame.draw.rect(jeu,WHITE,(66*n,25,205,50),2)
        texteRect.topleft = (67*n,40)
        jeu.blit(texteSurface,texteRect)

    elif joueurActif [0]==2:
        pygame.draw.rect(jeu,BLACK,(66*n,25,205,50),0)
        fontObj = pygame.font.Font('freesansbold.ttf',20)
        texteSurface = fontObj.render('Poser un pion noir',True,WHITE,BLACK)
        texteRect = texteSurface.get_rect()
        pygame.draw.rect(jeu,WHITE,(66*n,25,205,50),2)
        texteRect.topleft = (67*n,40)
        jeu.blit(texteSurface,texteRect)


    x=0
    y=0
    t=0

    for i in range(b):
        for a in range (b):
            if event.type == MOUSEBUTTONDOWN and liste1[i][a].collidepoint(event.pos):

                if joueurActif [0]==1 :
                    liste[i][a]=1
                    joueurActif[0] = 2

                elif joueurActif [0]==2 :
                    liste[i][a]=2
                    joueurActif[0]=1
    if event.type == MOUSEBUTTONDOWN:
        if rfle1.collidepoint(event.pos):
            rotation(liste,1,True)






def MajQuadrant(jeu,WHITE,BLACK,liste,b,liste1):
    x=50
    y=50


    for i in range (len(liste)):
        for a in range (b):

            if liste[i][a]==1:
                pygame.draw.circle(jeu, WHITE, (75+a*x,75+i*y), 10)

            if liste[i][a]==2:
                pygame.draw.circle(jeu, BLACK, (75+a*x,75+i*y), 10)



def AffiFleches (jeu,BLACK):
    n = 6
    fleche1=pygame.image.load('fleche1.jpg')
    fleche2=pygame.image.load('fleche2.jpg')
    fleche3=pygame.image.load('fleche3.jpg')
    fleche4=pygame.image.load('fleche4.jpg')
    fleche5=pygame.image.load('fleche5.jpg')
    fleche6=pygame.image.load('fleche6.jpg')
    fleche7=pygame.image.load('fleche7.jpg')
    fleche8=pygame.image.load('fleche8.jpg')

    jeu.blit(fleche1,(17*n,3*n))
    jeu.blit(fleche2,(42*n,3*n))
    jeu.blit(fleche3,(59*n,17*n))
    jeu.blit(fleche4,(59*n,42*n))
    jeu.blit(fleche5,(42*n,59*n))
    jeu.blit(fleche6,(17*n,59*n))
    jeu.blit(fleche7,(3*n,42*n))
    jeu.blit(fleche8,(3*n,17*n))

def rotation(liste,cadran,sens):

    def rotateright(liste):
        liste = [list(liste) for liste in (zip(*liste[::-1]))]
        return liste

    def rotateleft(liste):
        liste = [list(liste) for liste in (zip(*liste[::-1]))]
        liste = [list(liste) for liste in (zip(*liste[::-1]))]
        liste = [list(liste) for liste in (zip(*liste[::-1]))]
        return liste

    if sens == True:

        if cadran == 1:
            cadrancopy = copy.deepcopy(liste)
            for i in range(len(liste)//2):
               cadrancopy.pop(-1)
            for x in range (len(liste)//2 ):
                for j in range(len(liste)//2 ):
                    cadrancopy[x].pop(-1)
            cadrancopy = rotateright(cadrancopy)
            for x in range(len(liste)//2):
                for y in range(len(liste)//2):
                    liste[x][y] = cadrancopy[x][y]

        if cadran == 2:
            cadrancopy = copy.deepcopy(liste)
            for i in range(len(liste)//2):
               cadrancopy.pop(-1)
            for x in range (len(liste)//2 ):
                for j in range(len(liste)//2 ):
                    cadrancopy[x].pop(0)
            cadrancopy = rotateright(cadrancopy)
            for x in range(len(liste)//2):
                for y in range(1,(len(liste)//2)+1):
                    liste[x][-y] = cadrancopy[x][-y]


        if cadran == 3:
            cadrancopy = copy.deepcopy(liste)
            for i in range(len(liste)//2):
               cadrancopy.pop(0)
            for x in range (len(liste)//2 ):
                for j in range(len(liste)//2 ):
                    cadrancopy[x].pop(-1)
            cadrancopy = rotateright(cadrancopy)
            for x in range(1,(len(liste)//2)+1):
                for y in range(len(liste)//2):
                    liste[-x][y] = cadrancopy[-x][y]

        if cadran == 4:
            cadrancopy = copy.deepcopy(liste)
            for i in range(len(liste)//2):
               cadrancopy.pop(0)
            for x in range (len(liste)//2 ):
                for j in range(len(liste)//2 ):
                    cadrancopy[x].pop(0)
            cadrancopy = rotateright(cadrancopy)
            for x in range(1,(len(liste)//2)+1):
                for y in range(1,(len(liste)//2)+1):
                    liste[-x][-y] = cadrancopy[-x][-y]
    else:

        if cadran == 1:
            cadrancopy = copy.deepcopy(liste)
            for i in range(len(liste)//2):
               cadrancopy.pop(-1)
            for x in range (len(liste)//2 ):
                for j in range(len(liste)//2 ):
                    cadrancopy[x].pop(-1)
            cadrancopy = rotateleft(cadrancopy)
            for x in range(len(liste)//2):
                for y in range(len(liste)//2):
                    liste[x][y] = cadrancopy[x][y]


        if cadran == 2:
            cadrancopy = copy.deepcopy(liste)
            for i in range(len(liste)//2):
               cadrancopy.pop(-1)
            for x in range (len(liste)//2 ):
                for j in range(len(liste)//2 ):
                    cadrancopy[x].pop(0)
            cadrancopy = rotateleft(cadrancopy)
            for x in range(len(liste)//2):
                for y in range(1,(len(liste)//2)+1):
                    liste[x][-y] = cadrancopy[x][-y]


        if cadran == 3:
            cadrancopy = copy.deepcopy(liste)
            for i in range(len(liste)//2):
               cadrancopy.pop(0)
            for x in range (len(liste)//2 ):
                for j in range(len(liste)//2 ):
                    cadrancopy[x].pop(-1)
            cadrancopy = rotateleft(cadrancopy)
            for x in range(1,(len(liste)//2)+1):
                for y in range(len(liste)//2):
                    liste[-x][y] = cadrancopy[-x][y]

        if cadran == 4:
            cadrancopy = copy.deepcopy(liste)
            for i in range(len(liste)//2):
               cadrancopy.pop(0)
            for x in range (len(liste)//2 ):
                for j in range(len(liste)//2 ):
                    cadrancopy[x].pop(0)
            cadrancopy = rotateleft(cadrancopy)
            for x in range(1,(len(liste)//2)+1):
                for y in range(1,(len(liste)//2)+1):
                    liste[-x][-y] = cadrancopy[-x][-y]


fenetre()
